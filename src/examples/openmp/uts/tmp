typedef long int ptrdiff_t;
typedef long unsigned int size_t;



typedef long int ptrdiff_t;
typedef long unsigned int size_t;

extern void init_chimes();
extern void calling(void *func_ptr, int lbl, size_t set_return_alias,
        unsigned naliases, ...);
extern int get_next_call();
extern void new_stack(void *func_ptr, unsigned n_local_arg_aliases,
        unsigned nargs, ...);
extern void init_module(size_t module_id, int n_contains_mappings, int nstructs,
        ...);
extern void rm_stack(bool has_return_alias, size_t returned_alias);
extern void register_stack_var(const char *mangled_name,
        const char *full_type, void *ptr, size_t size, int is_ptr,
        int is_struct, int n_ptr_fields, ...);
extern void register_global_var(const char *mangled_name, const char *full_type,
        void *ptr, size_t size, int is_ptr, int is_struct, int n_ptr_fields,
        ...);
extern int alias_group_changed(int ngroups, ...);
extern void *malloc_wrapper(size_t nbytes, size_t group, int is_ptr,
        int is_struct, ...);
extern void *calloc_wrapper(size_t num, size_t size, size_t group, int is_ptr,
        int is_struct, ...);
extern void *realloc_wrapper(void *ptr, size_t nbytes, size_t group);
extern void free_wrapper(void *ptr, size_t group);

extern unsigned entering_omp_parallel(unsigned lbl, size_t *region_id,
        unsigned nlocals, ...);
extern void register_thread_local_stack_vars(unsigned thread,
        unsigned parent, bool is_parallel_for, bool is_critical,
        unsigned parent_stack_depth, size_t region_id, unsigned nlocals, ...);
extern void leaving_omp_parallel(int expected_parent_stack_depth,
        size_t region_id);
extern unsigned get_parent_vars_stack_depth();
extern unsigned get_thread_stack_depth();

extern void chimes_error();
extern "C" {
extern int omp_get_thread_num (void) throw ();
}
inline unsigned LIBCHIMES_THREAD_NUM() { return omp_get_thread_num(); }





extern int ____chimes_replaying;

typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;







typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];

struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;

typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;





typedef __darwin_pid_t pid_t;
typedef __darwin_id_t id_t;







typedef int sig_atomic_t;
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,





    __rc :2,






             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};


struct __darwin_i386_avx_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
};
struct __darwin_i386_exception_state
{
 __uint16_t __trapno;
 __uint16_t __cpu;
 __uint32_t __err;
 __uint32_t __faultvaddr;
};
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};
struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};


struct __darwin_x86_avx_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
};
struct __darwin_x86_exception_state64
{
    __uint16_t __trapno;
    __uint16_t __cpu;
    __uint32_t __err;
    __uint64_t __faultvaddr;
};
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};




struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};


struct __darwin_mcontext_avx32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx_state __fs;
};
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};


struct __darwin_mcontext_avx64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};
typedef struct __darwin_mcontext64 *mcontext_t;

typedef __darwin_pthread_attr_t pthread_attr_t;

struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};


typedef struct __darwin_ucontext ucontext_t;


typedef __darwin_sigset_t sigset_t;
typedef __darwin_uid_t uid_t;

union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
typedef void (*sig_t)(int);
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
extern "C" {
void (*signal(int, void (*)(int)))(int);
}
typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;





typedef __darwin_intptr_t intptr_t;
typedef unsigned long uintptr_t;



typedef long int intmax_t;
typedef long unsigned int uintmax_t;







struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
typedef __uint64_t rlim_t;
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
typedef void *rusage_info_t;

struct rusage_info_v0 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
};

struct rusage_info_v1 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
};

struct rusage_info_v2 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
};

struct rusage_info_v3 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
};

typedef struct rusage_info_v3 rusage_info_current;
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
struct proc_rlimit_control_wakeupmon {
 uint32_t wm_flags;
 int32_t wm_rate;
};
extern "C" {
int getpriority(int, id_t);

int getiopolicy_np(int, int) ;

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) ;

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );
}
static inline
__uint16_t
_OSSwapInt16(
    __uint16_t _data
)
{
    return ((__uint16_t)((_data << 8) | (_data >> 8)));
}

static inline
__uint32_t
_OSSwapInt32(
    __uint32_t _data
)
{



    __asm__ ("bswap   %0" : "+r" (_data));
    return _data;

}
static inline
__uint64_t
_OSSwapInt64(
    __uint64_t _data
)
{
    __asm__ ("bswap   %0" : "+r" (_data));
    return _data;
}







union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
    w_Coredump:1,
    w_Retcode:8,
    w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
    w_Stopsig:8,
    w_Filler:16;






 } w_S;
};
extern "C" {
pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);

}

extern "C" {
void *alloca(size_t);
}
typedef __darwin_ct_rune_t ct_rune_t;
typedef __darwin_rune_t rune_t;



typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;


extern int __mb_cur_max;
extern "C" {
void abort(void) __attribute__((noreturn));
int abs(int) __attribute__((const));
int atexit(void (*)(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *, const void *, size_t,
     size_t, int (*)(const void *, const void *));
void *calloc(size_t, size_t);
div_t div(int, int) __attribute__((const));
void exit(int) __attribute__((noreturn));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((const));
ldiv_t ldiv(long, long) __attribute__((const));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t * , const char * , size_t);
int mbtowc(wchar_t * , const char * , size_t);
int posix_memalign(void **, size_t, size_t) ;
void qsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int rand(void);
void *realloc(void *, size_t);
void srand(unsigned);
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *, char **, int);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *, char **, int);

unsigned long
  strtoul(const char *, char **, int);

unsigned long long
  strtoull(const char *, char **, int);

int system(const char *) __asm("_" "system" ) ;
size_t wcstombs(char * , const wchar_t * , size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((noreturn));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]);
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void);
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void);
long nrand48(unsigned short[3]);
int posix_openpt(int);
char *ptsname(int);
int putenv(char *) __asm("_" "putenv" );
long random(void);
int rand_r(unsigned *);

char *realpath(const char * , char * ) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char *, const char *, int) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );






typedef unsigned char u_int8_t;
typedef unsigned short u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long long u_int64_t;


typedef int64_t register_t;
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;







typedef u_int64_t syscall_arg_t;

typedef __darwin_dev_t dev_t;
typedef __darwin_mode_t mode_t;

u_int32_t arc4random(void);
void arc4random_addrandom(unsigned char * , int );
void arc4random_buf(void * , size_t ) ;
void arc4random_stir(void);
u_int32_t
  arc4random_uniform(u_int32_t ) ;







char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" "$1050") __attribute__((deprecated));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);

int heapsort(void *, size_t, size_t,
     int (*)(const void *, const void *));




int mergesort(void *, size_t, size_t,
     int (*)(const void *, const void *));




void psort(void *, size_t, size_t,
     int (*)(const void *, const void *)) ;




void psort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *)) ;




void qsort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *));
int radixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void setprogname(const char *);
int sradixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void sranddev(void);
void srandomdev(void);
void *reallocf(void *, size_t);

long long
  strtoq(const char *, char **, int);
unsigned long long
  strtouq(const char *, char **, int);

extern char *suboptarg;
void *valloc(size_t);






}
typedef __darwin_va_list va_list;



extern "C" {

int renameat(int, const char *, int, const char *) ;

}

typedef __darwin_off_t fpos_t;
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read) (void *, char *, int);
 fpos_t (*_seek) (void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;

extern "C" {
extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;
}
extern "C" {
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * , fpos_t *);
char *fgets(char * , int, FILE *);



FILE *fopen(const char * , const char * ) __asm("_" "fopen" );

int fprintf(FILE * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * , FILE * ) __asm("_" "fputs" );
size_t fread(void * , size_t, size_t, FILE * );
FILE *freopen(const char * , const char * ,
                 FILE * ) __asm("_" "freopen" );
int fscanf(FILE * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * , size_t, size_t, FILE * ) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *);
int printf(const char * , ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *, const char *);
void rewind(FILE *);
int scanf(const char * , ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * , char * );
int setvbuf(FILE * , char * , int, size_t);
int sprintf(char * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
int sscanf(const char * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);


__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * , va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
}
extern "C" {



char *ctermid(char *);





FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);
}
extern "C" {
int pclose(FILE *);



FILE *popen(const char *, const char *) __asm("_" "popen" );

}
extern "C" {
int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);
}







inline __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
extern "C" {
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);



__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tempnam(const char *, const char *) __asm("_" "tempnam" );
}
typedef __darwin_off_t off_t;

extern "C" {
int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);
}



extern "C" {
int snprintf(char * , size_t, const char * , ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * , const char * , va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * , va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * , size_t, const char * , va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * , const char * , va_list) __attribute__((__format__ (__scanf__, 2, 0)));
}
typedef __darwin_ssize_t ssize_t;

extern "C" {
int dprintf(int, const char * , ...) __attribute__((__format__ (__printf__, 2, 3))) ;
int vdprintf(int, const char * , va_list) __attribute__((__format__ (__printf__, 2, 0))) ;
ssize_t getdelim(char ** , size_t * , int, FILE * ) ;
ssize_t getline(char ** , size_t * , FILE * ) ;
}







extern "C" {
extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char ** , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
FILE *zopen(const char *, const char *, int);





FILE *funopen(const void *,
                 int (*)(void *, char *, int),
                 int (*)(void *, const char *, int),
                 fpos_t (*)(void *, fpos_t, int),
                 int (*)(void *));
}
extern "C" {
void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);
char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strerror(int) __asm("_" "strerror" );
size_t strlen(const char *);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
char *strtok(char *, const char *);
size_t strxfrm(char *, const char *, size_t);
}
extern "C" {
char *strtok_r(char *, const char *, char **);
}
extern "C" {
int strerror_r(int, char *, size_t);
char *strdup(const char *);
void *memccpy(void *, const void *, int, size_t);
}
extern "C" {
char *stpcpy(char *, const char *);
char *stpncpy(char *, const char *, size_t) ;
char *strndup(const char *, size_t) ;
size_t strnlen(const char *, size_t) ;
char *strsignal(int sig);
}





typedef __darwin_size_t rsize_t;
typedef int errno_t;

extern "C" {
errno_t memset_s(void *, rsize_t, int, rsize_t) ;
}







extern "C" {
void *memmem(const void *, size_t, const void *, size_t) ;
void memset_pattern4(void *, const void *, size_t) ;
void memset_pattern8(void *, const void *, size_t) ;
void memset_pattern16(void *, const void *, size_t) ;

char *strcasestr(const char *, const char *);
char *strnstr(const char *, const char *, size_t);
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
void strmode(int, char *);
char *strsep(char **, const char *);


void swab(const void * , void * , ssize_t);
}






extern "C" {


int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);
}



extern "C" {
int ffsl(long) ;
int ffsll(long long) ;
int fls(int) ;
int flsl(long) ;
int flsll(long long) ;
}

extern "C" {
    typedef float float_t;
    typedef double double_t;
extern int __math_errhandling(void);
extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __fpclassifyl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float);
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double);
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double);
inline __attribute__ ((__always_inline__)) int __inline_isinff(float);
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double);
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnand(double);
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double);
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double);
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float);
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double);
inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double);

inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float __x) {
    return __x == __x && __builtin_fabsf(__x) != __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double __x) {
    return __x == __x && __builtin_fabs(__x) != __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double __x) {
    return __x == __x && __builtin_fabsl(__x) != __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isinff(float __x) {
    return __builtin_fabsf(__x) == __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double __x) {
    return __builtin_fabs(__x) == __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double __x) {
    return __builtin_fabsl(__x) == __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnand(double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float __x) {
    union { float __f; unsigned int __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 31);
}
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double __x) {
    union { double __f; unsigned long long __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}

inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double __x) {
    union {
        long double __ld;
        struct{ unsigned long long __m; unsigned short __sexp; } __p;
    } __u;
    __u.__ld = __x;
    return (int)(__u.__p.__sexp >> 15);
}







inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float __x) {
    return __inline_isfinitef(__x) && __builtin_fabsf(__x) >= 1.17549435082228750797e-38F;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double __x) {
    return __inline_isfinited(__x) && __builtin_fabs(__x) >= double(2.22507385850720138309e-308L);
}
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double __x) {
    return __inline_isfinitel(__x) && __builtin_fabsl(__x) >= 3.36210314311209350626e-4932L;
}
extern float acosf(float);
extern double acos(double);
extern long double acosl(long double);

extern float asinf(float);
extern double asin(double);
extern long double asinl(long double);

extern float atanf(float);
extern double atan(double);
extern long double atanl(long double);

extern float atan2f(float, float);
extern double atan2(double, double);
extern long double atan2l(long double, long double);

extern float cosf(float);
extern double cos(double);
extern long double cosl(long double);

extern float sinf(float);
extern double sin(double);
extern long double sinl(long double);

extern float tanf(float);
extern double tan(double);
extern long double tanl(long double);

extern float acoshf(float);
extern double acosh(double);
extern long double acoshl(long double);

extern float asinhf(float);
extern double asinh(double);
extern long double asinhl(long double);

extern float atanhf(float);
extern double atanh(double);
extern long double atanhl(long double);

extern float coshf(float);
extern double cosh(double);
extern long double coshl(long double);

extern float sinhf(float);
extern double sinh(double);
extern long double sinhl(long double);

extern float tanhf(float);
extern double tanh(double);
extern long double tanhl(long double);

extern float expf(float);
extern double exp(double);
extern long double expl(long double);

extern float exp2f(float);
extern double exp2(double);
extern long double exp2l(long double);

extern float expm1f(float);
extern double expm1(double);
extern long double expm1l(long double);

extern float logf(float);
extern double log(double);
extern long double logl(long double);

extern float log10f(float);
extern double log10(double);
extern long double log10l(long double);

extern float log2f(float);
extern double log2(double);
extern long double log2l(long double);

extern float log1pf(float);
extern double log1p(double);
extern long double log1pl(long double);

extern float logbf(float);
extern double logb(double);
extern long double logbl(long double);

extern float modff(float, float *);
extern double modf(double, double *);
extern long double modfl(long double, long double *);

extern float ldexpf(float, int);
extern double ldexp(double, int);
extern long double ldexpl(long double, int);

extern float frexpf(float, int *);
extern double frexp(double, int *);
extern long double frexpl(long double, int *);

extern int ilogbf(float);
extern int ilogb(double);
extern int ilogbl(long double);

extern float scalbnf(float, int);
extern double scalbn(double, int);
extern long double scalbnl(long double, int);

extern float scalblnf(float, long int);
extern double scalbln(double, long int);
extern long double scalblnl(long double, long int);

extern float fabsf(float);
extern double fabs(double);
extern long double fabsl(long double);

extern float cbrtf(float);
extern double cbrt(double);
extern long double cbrtl(long double);

extern float hypotf(float, float);
extern double hypot(double, double);
extern long double hypotl(long double, long double);

extern float powf(float, float);
extern double pow(double, double);
extern long double powl(long double, long double);

extern float sqrtf(float);
extern double sqrt(double);
extern long double sqrtl(long double);

extern float erff(float);
extern double erf(double);
extern long double erfl(long double);

extern float erfcf(float);
extern double erfc(double);
extern long double erfcl(long double);




extern float lgammaf(float);
extern double lgamma(double);
extern long double lgammal(long double);

extern float tgammaf(float);
extern double tgamma(double);
extern long double tgammal(long double);

extern float ceilf(float);
extern double ceil(double);
extern long double ceill(long double);

extern float floorf(float);
extern double floor(double);
extern long double floorl(long double);

extern float nearbyintf(float);
extern double nearbyint(double);
extern long double nearbyintl(long double);

extern float rintf(float);
extern double rint(double);
extern long double rintl(long double);

extern long int lrintf(float);
extern long int lrint(double);
extern long int lrintl(long double);

extern float roundf(float);
extern double round(double);
extern long double roundl(long double);

extern long int lroundf(float);
extern long int lround(double);
extern long int lroundl(long double);




extern long long int llrintf(float);
extern long long int llrint(double);
extern long long int llrintl(long double);

extern long long int llroundf(float);
extern long long int llround(double);
extern long long int llroundl(long double);


extern float truncf(float);
extern double trunc(double);
extern long double truncl(long double);

extern float fmodf(float, float);
extern double fmod(double, double);
extern long double fmodl(long double, long double);

extern float remainderf(float, float);
extern double remainder(double, double);
extern long double remainderl(long double, long double);

extern float remquof(float, float, int *);
extern double remquo(double, double, int *);
extern long double remquol(long double, long double, int *);

extern float copysignf(float, float);
extern double copysign(double, double);
extern long double copysignl(long double, long double);

extern float nanf(const char *);
extern double nan(const char *);
extern long double nanl(const char *);

extern float nextafterf(float, float);
extern double nextafter(double, double);
extern long double nextafterl(long double, long double);

extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);

extern float fdimf(float, float);
extern double fdim(double, double);
extern long double fdiml(long double, long double);

extern float fmaxf(float, float);
extern double fmax(double, double);
extern long double fmaxl(long double, long double);

extern float fminf(float, float);
extern double fmin(double, double);
extern long double fminl(long double, long double);

extern float fmaf(float, float, float);
extern double fma(double, double, double);
extern long double fmal(long double, long double, long double);
extern float __inff(void) __attribute__((deprecated));
extern double __inf(void) __attribute__((deprecated));
extern long double __infl(void) __attribute__((deprecated));

extern float __nan(void) ;
extern float __exp10f(float) ;
extern double __exp10(double) ;





inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) ;
inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) ;
extern float __cospif(float) ;
extern double __cospi(double) ;
extern float __sinpif(float) ;
extern double __sinpi(double) ;
extern float __tanpif(float) ;
extern double __tanpi(double) ;






inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) ;
inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) ;






struct __float2 { float __sinval; float __cosval; };
struct __double2 { double __sinval; double __cosval; };

extern struct __float2 __sincosf_stret(float);
extern struct __double2 __sincos_stret(double);
extern struct __float2 __sincospif_stret(float);
extern struct __double2 __sincospi_stret(double);

inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincosf_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincos_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincospif_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincospi_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}






extern double j0(double) ;
extern double j1(double) ;
extern double jn(int, double) ;
extern double y0(double) ;
extern double y1(double) ;
extern double yn(int, double) ;
extern double scalb(double, double);
extern int signgam;
extern long int rinttol(double) __attribute__((deprecated));

extern long int roundtol(double) __attribute__((deprecated));

extern double drem(double, double) __attribute__((deprecated));

extern int finite(double) __attribute__((deprecated));

extern double gamma(double) __attribute__((deprecated));

extern double significand(double) __attribute__((deprecated));
}

typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;

typedef unsigned long u_long;


typedef unsigned short ushort;
typedef unsigned int uint;


typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

typedef char * caddr_t;
typedef int32_t daddr_t;



typedef u_int32_t fixpt_t;

typedef __darwin_blkcnt_t blkcnt_t;
typedef __darwin_blksize_t blksize_t;
typedef __darwin_gid_t gid_t;
typedef __uint32_t in_addr_t;
typedef __uint16_t in_port_t;
typedef __darwin_ino_t ino_t;


typedef __darwin_ino64_t ino64_t;


typedef __int32_t key_t;

typedef __uint16_t nlink_t;




typedef int32_t segsz_t;
typedef int32_t swblk_t;
static inline __int32_t major(__uint32_t _x)
{
 return (__int32_t)(((__uint32_t)_x >> 24) & 0xff);
}

static inline __int32_t minor(__uint32_t _x)
{
 return (__int32_t)((_x) & 0xffffff);
}

static inline dev_t makedev(__uint32_t _major, __uint32_t _minor)
{
 return (dev_t)(((_major) << 24) | (_minor));
}
typedef __darwin_clock_t clock_t;


typedef __darwin_time_t time_t;

typedef __darwin_useconds_t useconds_t;
typedef __darwin_suseconds_t suseconds_t;
extern "C" {
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;
}


static inline int
__darwin_fd_isset(int _n, const struct fd_set *_p)
{
 return (_p->fds_bits[(unsigned long)_n/(sizeof(__int32_t) * 8)] & ((__int32_t)(1<<((unsigned long)_n % (sizeof(__int32_t) * 8)))));
}




typedef __int32_t fd_mask;









typedef __darwin_pthread_cond_t pthread_cond_t;
typedef __darwin_pthread_condattr_t pthread_condattr_t;
typedef __darwin_pthread_mutex_t pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
typedef __darwin_pthread_once_t pthread_once_t;
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
typedef __darwin_pthread_t pthread_t;



typedef __darwin_pthread_key_t pthread_key_t;




typedef __darwin_fsblkcnt_t fsblkcnt_t;
typedef __darwin_fsfilcnt_t fsfilcnt_t;


extern "C" {













     typedef unsigned char uint_8t;
     typedef unsigned short uint_16t;
     typedef unsigned int uint_32t;
       typedef unsigned long uint_64t;
}





extern "C"
{
typedef u_int8_t RNG_state;
typedef u_int8_t uint8;
typedef u_int32_t uint32;





struct state_t {
  uint8 state[20];
};





void rng_init(RNG_state *state, int seed);
void rng_spawn(RNG_state *mystate, RNG_state *newstate, int spawnNumber);
int rng_rand(RNG_state *mystate);
int rng_nextrand(RNG_state *mystate);
char * rng_showstate(RNG_state *state, char *s);
int rng_showtype(char *strBuf, int ind);




struct sha1_ctx_s
{ uint_32t count[2];
    uint_32t hash[5];
    uint_32t wbuf[16];
};

typedef struct sha1_ctx_s sha1_ctx;
void sha1_compile(sha1_ctx ctx[1]);

void sha1_begin(sha1_ctx ctx[1]);
void sha1_hash(const unsigned char data[], unsigned long len, sha1_ctx ctx[1]);
void sha1_end(unsigned char hval[], sha1_ctx ctx[1]);
void sha1(unsigned char hval[], const unsigned char data[], unsigned long len);


}
struct node_t {
  int type;
  int height;
  int numChildren;
  struct state_t state;
};

typedef struct node_t Node;
enum uts_trees_e { BIN = 0, GEO, HYBRID };
enum uts_geoshape_e { LINEAR = 0, EXPDEC, CYCLIC, FIXED };

typedef enum uts_trees_e tree_t;
typedef enum uts_geoshape_e geoshape_t;


extern char * uts_trees_str[];
extern char * uts_geoshapes_str[];



extern tree_t type;
extern double b_0;
extern int rootId;
extern int nonLeafBF;
extern double nonLeafProb;
extern int gen_mx;
extern geoshape_t shape_fn;
extern double shiftDepth;


extern int computeGranularity;
extern int debug;
extern int verbose;






void uts_error(char *str);
void uts_parseParams(int argc, char **argv);
int uts_paramsToStr(char *strBuf, int ind);
void uts_printParams();
void uts_helpMessage();

void uts_showStats(int nPes, int chunkSize, double walltime, int nNodes, int nLeaves, int maxDepth);
double uts_wctime();

double rng_toProb(int n);


void uts_initRoot(Node * root, int type);
int uts_numChildren(Node *parent);
int uts_numChildren_bin(Node * parent);
int uts_numChildren_geo(Node * parent);
int uts_childType(Node *parent);


char * impl_getName();
int impl_paramsToStr(char *strBuf, int ind);
int impl_parseParam(char *param, char *value);
void impl_helpMessage();
void impl_abort(int err);

extern void checkpoint();

extern void wait_for_checkpoint();
typedef struct
{
  unsigned char _x[64]
    __attribute__((__aligned__(8)));
} omp_lock_t;

typedef struct
{
  unsigned char _x[80]
    __attribute__((__aligned__(8)));
} omp_nest_lock_t;


typedef enum omp_sched_t
{
  omp_sched_static = 1,
  omp_sched_dynamic = 2,
  omp_sched_guided = 3,
  omp_sched_auto = 4
} omp_sched_t;

typedef enum omp_proc_bind_t
{
  omp_proc_bind_false = 0,
  omp_proc_bind_true = 1,
  omp_proc_bind_master = 2,
  omp_proc_bind_close = 3,
  omp_proc_bind_spread = 4
} omp_proc_bind_t;


extern "C" {





extern void omp_set_num_threads (int) throw ();
extern int omp_get_num_threads (void) throw ();
extern int omp_get_max_threads (void) throw ();
extern int omp_get_thread_num (void) throw ();
extern int omp_get_num_procs (void) throw ();

extern int omp_in_parallel (void) throw ();

extern void omp_set_dynamic (int) throw ();
extern int omp_get_dynamic (void) throw ();

extern void omp_set_nested (int) throw ();
extern int omp_get_nested (void) throw ();

extern void omp_init_lock (omp_lock_t *) throw ();
extern void omp_destroy_lock (omp_lock_t *) throw ();
extern void omp_set_lock (omp_lock_t *) throw ();
extern void omp_unset_lock (omp_lock_t *) throw ();
extern int omp_test_lock (omp_lock_t *) throw ();

extern void omp_init_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_destroy_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_set_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_unset_nest_lock (omp_nest_lock_t *) throw ();
extern int omp_test_nest_lock (omp_nest_lock_t *) throw ();

extern double omp_get_wtime (void) throw ();
extern double omp_get_wtick (void) throw ();

extern void omp_set_schedule (omp_sched_t, int) throw ();
extern void omp_get_schedule (omp_sched_t *, int *) throw ();
extern int omp_get_thread_limit (void) throw ();
extern void omp_set_max_active_levels (int) throw ();
extern int omp_get_max_active_levels (void) throw ();
extern int omp_get_level (void) throw ();
extern int omp_get_ancestor_thread_num (int) throw ();
extern int omp_get_team_size (int) throw ();
extern int omp_get_active_level (void) throw ();

extern int omp_in_final (void) throw ();

extern int omp_get_cancellation (void) throw ();
extern omp_proc_bind_t omp_get_proc_bind (void) throw ();

extern void omp_set_default_device (int) throw ();
extern int omp_get_default_device (void) throw ();
extern int omp_get_num_devices (void) throw ();
extern int omp_get_num_teams (void) throw ();
extern int omp_get_team_num (void) throw ();

extern int omp_is_initial_device (void) throw ();


}
omp_lock_t * omp_global_lock_alloc() {new_stack((void *)(&omp_global_lock_alloc), 0, 0); if (____chimes_replaying) { goto lbl_0; }
    lbl_0: omp_lock_t *lock; register_stack_var("omp_global_lock_alloc|lock|0", "%struct.omp_lock_t*", (void *)(&lock), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(3): { goto call_lbl_3; } default: { chimes_error(); } } } lock = ((omp_lock_t *)malloc_wrapper(sizeof(omp_lock_t) + 128, 9545009563461850213UL, 0, 1, (int)sizeof(omp_lock_t), 0)) ;
  alias_group_changed(1, (size_t)(9545009563461850211UL)); call_lbl_3: calling((void*)&omp_init_lock, 3, 0UL, 1, (size_t)(9545009563461850213UL)); omp_init_lock(lock);
  rm_stack(true, 9545009563461850213UL); return lock;
}
int doSteal = 1;
int chunkSize = 20;
int cbint = 1;
int pollint = 1;
int stats = 0;
int unbType = -1;
struct sessionRecord_t {
  double startTime, endTime;
};
typedef struct sessionRecord_t SessionRecord;
struct stealRecord_t {
  long int nodeCount;
  int victimThread;
};
typedef struct stealRecord_t StealRecord;
struct metaData_t {
  SessionRecord sessionRecords[5][20000];
  StealRecord stealRecords[20000];
};
typedef struct metaData_t MetaData;
char debug_str[1000];
struct stealStack_t
{
  int stackSize;
  int workAvail;
  int sharedStart;
  int local;
  int top;
  int maxStackDepth;
  int nNodes, maxTreeDepth;
  int nLeaves;
  int nAcquire, nRelease, nSteal, nFail;
  int wakeups, falseWakeups, nNodes_last;
  double time[5], timeLast;
  int entries[5], curState;
  omp_lock_t * stackLock;
  Node * stack;
  Node * stack_g;
};
typedef struct stealStack_t StealStack;
typedef StealStack * SharedStealStackPtr;
 SharedStealStackPtr stealStack[32];
volatile int cb_cancel;
volatile int cb_count;
volatile int cb_done;
omp_lock_t * cb_lock;
 double startTime[32];
char * impl_getName() {new_stack((void *)(&impl_getName), 0, 0); if (____chimes_replaying) { switch(get_next_call()) { default: { chimes_error(); } } }
  char *name[] = { "Sequential C", "C/OpenMP", "UPC", "SHMEM", "PThreads" }; ;
  alias_group_changed(1, (size_t)(9545009563461850224UL)); rm_stack(true, 9545009563461852202UL); return name[1];
}
int impl_paramsToStr(char *strBuf, int ind) {new_stack((void *)(&impl_paramsToStr), 2, 2, (size_t)(9545009563461850312UL), (size_t)(0UL), "impl_paramsToStr|strBuf|0", "i8*", (void *)(&strBuf), (size_t)8, 1, 0, 0, "impl_paramsToStr|ind|0", "i32", (void *)(&ind), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(5): { goto call_lbl_5; } default: { chimes_error(); } } }
  alias_group_changed(2, (size_t)(9545009563461850247UL), (size_t)(9545009563461850248UL)); ind += sprintf(strBuf+ind, "Execution strategy:  ");
  if (1) {{ alias_group_changed(1, (size_t)(9545009563461850248UL)); call_lbl_5: calling((void*)&omp_get_num_threads, 5, 0UL, 0); ind += sprintf(strBuf + ind, "Parallel search using %d threads\n", omp_get_num_threads()); if (doSteal) { alias_group_changed(1, (size_t)(9545009563461850248UL)); ind += sprintf(strBuf + ind, "   Load balance by work stealing, chunk size = %d nodes\n", chunkSize); alias_group_changed(1, (size_t)(9545009563461850248UL)); ind += sprintf(strBuf + ind, "  CBarrier Interval: %d\n", cbint); ind += sprintf(strBuf + ind, "   Polling Interval: %d\n", pollint); } else ind += sprintf(strBuf + ind, "   No load balancing.\n"); }; } else {ind += sprintf(strBuf + ind, "Iterative sequential search\n"); } ;
  alias_group_changed(1, (size_t)(9545009563461850248UL)); rm_stack(false, 0UL); return ind;
}
int impl_parseParam(char *param, char *value) {new_stack((void *)(&impl_parseParam), 2, 2, (size_t)(9545009563461850354UL), (size_t)(9545009563461850355UL), "impl_parseParam|param|0", "i8*", (void *)(&param), (size_t)8, 1, 0, 0, "impl_parseParam|value|0", "i8*", (void *)(&value), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_0; }
    lbl_0: int err; register_stack_var("impl_parseParam|err|0", "i32", (void *)(&err), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { default: { chimes_error(); } } } err = (0) ;
  switch (param[1]) {
    case 'c':
      alias_group_changed(3, (size_t)(9545009563461850316UL), (size_t)(9545009563461850317UL), (size_t)(9545009563461850318UL)); chunkSize = atoi(value); break;
    case 's':
      alias_group_changed(3, (size_t)(9545009563461850316UL), (size_t)(9545009563461850317UL), (size_t)(9545009563461850318UL)); doSteal = atoi(value);
      if (doSteal != 1 && doSteal != 0) {err = 1; };
      break;
    case 'i':
      alias_group_changed(3, (size_t)(9545009563461850316UL), (size_t)(9545009563461850317UL), (size_t)(9545009563461850318UL)); cbint = atoi(value); break;
    default:
      err = 1;
      break;
  }
  alias_group_changed(4, (size_t)(9545009563461850316UL), (size_t)(9545009563461850317UL), (size_t)(9545009563461850318UL), (size_t)(9545009563461852189UL)); rm_stack(false, 0UL); return err;
}
void impl_helpMessage() {new_stack((void *)(&impl_helpMessage), 0, 0); if (____chimes_replaying) { switch(get_next_call()) { default: { chimes_error(); } } }
  if (1) {
    printf("   -s  int   zero/nonzero to disable/enable work stealing\n");
    printf("   -c  int   chunksize for work stealing\n");
    printf("   -i  int   set cancellable barrier polling interval\n");
  } else {
    printf("   none.\n");
  }
rm_stack(false, 0UL); }
void impl_abort(int err) {new_stack((void *)(&impl_abort), 1, 1, (size_t)(0UL), "impl_abort|err|0", "i32", (void *)(&err), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { default: { chimes_error(); } } }
  alias_group_changed(1, (size_t)(9545009563461850362UL)); exit(err);
rm_stack(false, 0UL); }
void ss_mkEmpty(StealStack *s) {new_stack((void *)(&ss_mkEmpty), 1, 1, (size_t)(9545009563461850395UL), "ss_mkEmpty|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(4): { goto call_lbl_4; } default: { chimes_error(); } } }
  alias_group_changed(1, (size_t)(9545009563461850371UL)); call_lbl_2: calling((void*)&omp_set_lock, 2, 0UL, 1, (size_t)(9545009563461850376UL)); omp_set_lock(s->stackLock);
  s->sharedStart = 0;
  s->local = 0;
  s->top = 0;
  s->workAvail = 0;
  alias_group_changed(1, (size_t)(9545009563461850395UL)); call_lbl_4: calling((void*)&omp_unset_lock, 4, 0UL, 1, (size_t)(9545009563461850376UL)); omp_unset_lock(s->stackLock);
rm_stack(false, 0UL); }
void ss_error(char *str) {new_stack((void *)(&ss_error), 1, 1, (size_t)(9545009563461850407UL), "ss_error|str|0", "i8*", (void *)(&str), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { default: { chimes_error(); } } }
  alias_group_changed(1, (size_t)(9545009563461850398UL)); printf("*** [Thread %i] %s\n",omp_get_thread_num(), str);
  exit(4);
rm_stack(false, 0UL); }
void ss_init(StealStack *s, int nelts) {new_stack((void *)(&ss_init), 2, 2, (size_t)(9545009563461850507UL), (size_t)(0UL), "ss_init|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0, "ss_init|nelts|0", "i32", (void *)(&nelts), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_0; }
    lbl_0: int nbytes; register_stack_var("ss_init|nbytes|0", "i32", (void *)(&nbytes), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(8): { goto call_lbl_8; } case(10): { goto call_lbl_10; } case(15): { goto call_lbl_15; } default: { chimes_error(); } } } nbytes = (nelts * sizeof(Node)) ;
  if (debug & 1) {alias_group_changed(4, (size_t)(9545009563461850408UL), (size_t)(9545009563461850409UL), (size_t)(9545009563461850410UL), (size_t)(9545009563461850507UL)); printf("Thread %d intializing stealStack %p, sizeof(Node) = %X\n", omp_get_thread_num(), s, (int)(sizeof(Node))); };
  s->stack_g = ( Node *) malloc_wrapper (nbytes, 9545009563461850431UL, 0, 1, (int)sizeof(struct node_t), 0);
  s->stack = (Node *) s->stack_g;
  if (s->stack == __null) {
    alias_group_changed(4, (size_t)(9545009563461850408UL), (size_t)(9545009563461850409UL), (size_t)(9545009563461850410UL), (size_t)(9545009563461850507UL)); printf("Request for %d bytes for stealStack on thread %d failed\n",
           nbytes, omp_get_thread_num());
     call_lbl_8: calling((void*)&ss_error, 8, 0UL, 1, (size_t)(9545009563461852220UL)); ss_error("ss_init: unable to allocate space for stealstack");
  }
  alias_group_changed(4, (size_t)(9545009563461850408UL), (size_t)(9545009563461850409UL), (size_t)(9545009563461850410UL), (size_t)(9545009563461850507UL)); call_lbl_10: calling((void*)&omp_global_lock_alloc, 10, 9545009563461850431UL, 0); s->stackLock=omp_global_lock_alloc();
  if (debug & 1) {alias_group_changed(1, (size_t)(9545009563461850507UL)); printf("Thread %d init stackLock %p\n", omp_get_thread_num(), (void *)s->stackLock); };
  s->stackSize = nelts;
  s->nNodes = 0;
  s->maxStackDepth = 0;
  s->maxTreeDepth = 0;
  s->nLeaves = 0;
  s->nAcquire = 0;
  s->nRelease = 0;
  s->nSteal = 0;
  s->nFail = 0;
  s->wakeups = 0;
  s->falseWakeups = 0;
  s->nNodes_last = 0;
  alias_group_changed(1, (size_t)(9545009563461850507UL)); call_lbl_15: calling((void*)&ss_mkEmpty, 15, 0UL, 1, (size_t)(9545009563461850507UL)); ss_mkEmpty(s);
rm_stack(false, 0UL); }
void ss_push(StealStack *s, Node *c) {new_stack((void *)(&ss_push), 2, 2, (size_t)(9545009563461850582UL), (size_t)(9545009563461850588UL), "ss_push|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0, "ss_push|c|0", "%struct.node_t*", (void *)(&c), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(6): { goto call_lbl_6; } case(7): { goto call_lbl_7; } default: { chimes_error(); } } }
  if (s->top >= s->stackSize) {alias_group_changed(2, (size_t)(9545009563461850509UL), (size_t)(9545009563461850510UL)); call_lbl_2: calling((void*)&ss_error, 2, 0UL, 1, (size_t)(9545009563461852222UL)); ss_error("ss_push: overflow"); };
  if (debug & 1) {alias_group_changed(2, (size_t)(9545009563461850509UL), (size_t)(9545009563461850510UL)); call_lbl_6: calling((void*)&rng_showstate, 6, 9545009563461850537UL, 2, (size_t)(9545009563461850588UL), (size_t)(9545009563461852195UL)); printf("ss_push: Thread %d, posn %d: node %s [%d]\n", omp_get_thread_num(), s->top, rng_showstate(c->state.state, debug_str), c->height); };
   call_lbl_7: calling((void*)&memcpy, 7, 0UL, 3, (size_t)(9545009563461850549UL), (size_t)(9545009563461850588UL), (size_t)(0UL)); memcpy(&(s->stack[s->top]), c, sizeof(Node));
  s->top++;
  s->nNodes++;
  s->maxStackDepth = (((s->top) > (s->maxStackDepth)) ? (s->top) : (s->maxStackDepth));
  s->maxTreeDepth = (((s->maxTreeDepth) > (c->height)) ? (s->maxTreeDepth) : (c->height));
alias_group_changed(3, (size_t)(9545009563461850509UL), (size_t)(9545009563461850510UL), (size_t)(9545009563461850582UL)); rm_stack(false, 0UL); }
Node * ss_top(StealStack *s) {new_stack((void *)(&ss_top), 1, 1, (size_t)(9545009563461850664UL), "ss_top|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: Node *r; register_stack_var("ss_top|r|0", "%struct.node_t*", (void *)(&r), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(6): { goto call_lbl_6; } default: { chimes_error(); } } } ;
  if (s->top <= s->local) {alias_group_changed(2, (size_t)(9545009563461850615UL), (size_t)(9545009563461850616UL)); call_lbl_2: calling((void*)&ss_error, 2, 0UL, 1, (size_t)(9545009563461852224UL)); ss_error("ss_top: empty local stack"); };
  r = &(s->stack[(s->top) - 1]);
  if (debug & 1) {alias_group_changed(2, (size_t)(9545009563461850615UL), (size_t)(9545009563461850616UL)); call_lbl_6: calling((void*)&rng_showstate, 6, 9545009563461850653UL, 2, (size_t)(9545009563461850637UL), (size_t)(9545009563461852195UL)); printf("ss_top: Thread %d, posn %d: node %s [%d] nchild = %d\n", omp_get_thread_num(), s->top - 1, rng_showstate(r->state.state, debug_str), r->height, r->numChildren); };
  alias_group_changed(2, (size_t)(9545009563461850615UL), (size_t)(9545009563461850616UL)); rm_stack(true, 9545009563461850637UL); return r;
}
void ss_pop(StealStack *s) {new_stack((void *)(&ss_pop), 1, 1, (size_t)(9545009563461850716UL), "ss_pop|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: Node *r; register_stack_var("ss_pop|r|0", "%struct.node_t*", (void *)(&r), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(6): { goto call_lbl_6; } default: { chimes_error(); } } } ;
  if (s->top <= s->local) {alias_group_changed(3, (size_t)(9545009563461850665UL), (size_t)(9545009563461850666UL), (size_t)(9545009563461850716UL)); call_lbl_2: calling((void*)&ss_error, 2, 0UL, 1, (size_t)(9545009563461852224UL)); ss_error("ss_pop: empty local stack"); };
  s->top--;
  r = &(s->stack[s->top]);
  if (debug & 1) {alias_group_changed(3, (size_t)(9545009563461850665UL), (size_t)(9545009563461850666UL), (size_t)(9545009563461850716UL)); call_lbl_6: calling((void*)&rng_showstate, 6, 9545009563461850706UL, 2, (size_t)(9545009563461850691UL), (size_t)(9545009563461852195UL)); printf("ss_pop: Thread %d, posn %d: node %s [%d] nchild = %d\n", omp_get_thread_num(), s->top, rng_showstate(r->state.state, debug_str), r->height, r->numChildren); };
alias_group_changed(3, (size_t)(9545009563461850665UL), (size_t)(9545009563461850666UL), (size_t)(9545009563461850716UL)); rm_stack(false, 0UL); }
int ss_topPosn(StealStack *s)
{new_stack((void *)(&ss_topPosn), 1, 1, (size_t)(9545009563461850735UL), "ss_topPosn|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } default: { chimes_error(); } } }
  if (s->top <= s->local) {alias_group_changed(1, (size_t)(9545009563461850717UL)); call_lbl_2: calling((void*)&ss_error, 2, 0UL, 1, (size_t)(9545009563461852228UL)); ss_error("ss_topPosn: empty local stack"); };
  alias_group_changed(1, (size_t)(9545009563461850717UL)); rm_stack(false, 0UL); return s->top - 1;
}
int ss_localDepth(StealStack *s) {new_stack((void *)(&ss_localDepth), 1, 0, (size_t)(9545009563461850747UL)); if (____chimes_replaying) { switch(get_next_call()) { default: { chimes_error(); } } }
  alias_group_changed(1, (size_t)(9545009563461850736UL)); rm_stack(false, 0UL); return (s->top - s->local);
}
void ss_release(StealStack *s, int k) {new_stack((void *)(&ss_release), 2, 2, (size_t)(9545009563461850793UL), (size_t)(0UL), "ss_release|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0, "ss_release|k|0", "i32", (void *)(&k), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(3): { goto call_lbl_3; } case(5): { goto call_lbl_5; } default: { chimes_error(); } } }
  alias_group_changed(2, (size_t)(9545009563461850748UL), (size_t)(9545009563461850749UL)); call_lbl_2: calling((void*)&omp_set_lock, 2, 0UL, 1, (size_t)(9545009563461850756UL)); omp_set_lock(s->stackLock);
  if (s->top - s->local >= k) {{ s->local += k; s->workAvail += k; s->nRelease++; }; } else { call_lbl_3: calling((void*)&ss_error, 3, 0UL, 1, (size_t)(9545009563461852223UL)); ss_error("ss_release:  do not have k vals to release"); } ;
  alias_group_changed(1, (size_t)(9545009563461850793UL)); call_lbl_5: calling((void*)&omp_unset_lock, 5, 0UL, 1, (size_t)(9545009563461850756UL)); omp_unset_lock(s->stackLock);
rm_stack(false, 0UL); }
int ss_acquire(StealStack *s, int k) {new_stack((void *)(&ss_acquire), 2, 2, (size_t)(9545009563461850846UL), (size_t)(0UL), "ss_acquire|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0, "ss_acquire|k|0", "i32", (void *)(&k), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: int avail; register_stack_var("ss_acquire|avail|0", "i32", (void *)(&avail), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(4): { goto call_lbl_4; } default: { chimes_error(); } } } ;
  alias_group_changed(2, (size_t)(9545009563461850795UL), (size_t)(9545009563461850796UL)); call_lbl_2: calling((void*)&omp_set_lock, 2, 0UL, 1, (size_t)(9545009563461850805UL)); omp_set_lock(s->stackLock);
  avail = s->local - s->sharedStart;
  if (avail >= k) {
    s->local -= k;
    s->workAvail -= k;
    s->nAcquire++;
  }
  alias_group_changed(2, (size_t)(9545009563461850797UL), (size_t)(9545009563461850846UL)); call_lbl_4: calling((void*)&omp_unset_lock, 4, 0UL, 1, (size_t)(9545009563461850805UL)); omp_unset_lock(s->stackLock);
  rm_stack(false, 0UL); return (avail >= k);
}
int ss_steal(StealStack *s, int victim, int k) {new_stack((void *)(&ss_steal), 3, 3, (size_t)(9545009563461851102UL), (size_t)(0UL), (size_t)(0UL), "ss_steal|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0, "ss_steal|victim|0", "i32", (void *)(&victim), (size_t)4, 0, 0, 0, "ss_steal|k|0", "i32", (void *)(&k), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: int victimLocal; register_stack_var("ss_steal|victimLocal|0", "i32", (void *)(&victimLocal), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_1; } lbl_1: int victimShared; register_stack_var("ss_steal|victimShared|0", "i32", (void *)(&victimShared), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_2; } lbl_2: int victimWorkAvail; register_stack_var("ss_steal|victimWorkAvail|0", "i32", (void *)(&victimWorkAvail), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_3; } ;
   lbl_3: int ok; register_stack_var("ss_steal|ok|0", "i32", (void *)(&ok), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_4; } ;
  if (s->sharedStart != s->top) {alias_group_changed(3, (size_t)(9545009563461850848UL), (size_t)(9545009563461850849UL), (size_t)(9545009563461850850UL)); call_lbl_2: calling((void*)&ss_error, 2, 0UL, 1, (size_t)(9545009563461852215UL)); ss_error("ss_steal: thief attempts to steal onto non-empty stack"); };
  if (s->top + k >= s->stackSize) {alias_group_changed(3, (size_t)(9545009563461850848UL), (size_t)(9545009563461850849UL), (size_t)(9545009563461850850UL)); call_lbl_4: calling((void*)&ss_error, 4, 0UL, 1, (size_t)(9545009563461852231UL)); ss_error("ss_steal: steal will overflow thief's stack"); };
  if (debug & 32) {alias_group_changed(3, (size_t)(9545009563461850848UL), (size_t)(9545009563461850849UL), (size_t)(9545009563461850850UL)); printf("Thread %d wants    SS %d\n", omp_get_thread_num(), victim); };
  alias_group_changed(3, (size_t)(9545009563461850848UL), (size_t)(9545009563461850849UL), (size_t)(9545009563461850850UL)); call_lbl_9: calling((void*)&omp_set_lock, 9, 0UL, 1, (size_t)(9545009563461851066UL)); omp_set_lock(stealStack[victim]->stackLock);
  if (debug & 32) {printf("Thread %d acquires SS %d\n", omp_get_thread_num(), victim); };
  victimLocal = stealStack[victim]->local;
  victimShared = stealStack[victim]->sharedStart;
  victimWorkAvail = stealStack[victim]->workAvail;
  if (victimLocal - victimShared != victimWorkAvail) {alias_group_changed(5, (size_t)(9545009563461850851UL), (size_t)(9545009563461850852UL), (size_t)(9545009563461850853UL), (size_t)(9545009563461850854UL), (size_t)(9545009563461851493UL)); call_lbl_13: calling((void*)&ss_error, 13, 0UL, 1, (size_t)(9545009563461852234UL)); ss_error("ss_steal: stealStack invariant violated"); };
  ok = victimWorkAvail >= k;
  if (ok) {
    stealStack[victim]->sharedStart = victimShared + k;
    stealStack[victim]->workAvail = victimWorkAvail - k;
  }
  alias_group_changed(5, (size_t)(9545009563461850851UL), (size_t)(9545009563461850852UL), (size_t)(9545009563461850853UL), (size_t)(9545009563461850854UL), (size_t)(9545009563461851493UL)); call_lbl_15: calling((void*)&omp_unset_lock, 15, 0UL, 1, (size_t)(9545009563461851066UL)); omp_unset_lock(stealStack[victim]->stackLock);
  if (debug & 32) {printf("Thread %d releases SS %d\n", omp_get_thread_num(), victim); };
  if (ok) {
      lbl_4: Node *victimStackBase; register_stack_var("ss_steal|victimStackBase|0", "%struct.node_t*", (void *)(&victimStackBase), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_5; } victimStackBase = (stealStack[victim]->stack_g) ;
      lbl_5: Node *victimSharedStart; register_stack_var("ss_steal|victimSharedStart|0", "%struct.node_t*", (void *)(&victimSharedStart), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_6; } victimSharedStart = (victimStackBase + victimShared) ;
     call_lbl_18: calling((void*)&memcpy, 18, 0UL, 3, (size_t)(9545009563461851042UL), (size_t)(9545009563461851066UL), (size_t)(0UL)); memcpy(&(s->stack[s->top]), victimSharedStart, k * sizeof(Node));
    s->nSteal++;
    if (debug & 4) {
       lbl_6: int i; register_stack_var("ss_steal|i|0", "i32", (void *)(&i), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_7; } ;
      for (i = 0; i < k; i ++) {
          lbl_7: Node *r; register_stack_var("ss_steal|r|0", "%struct.node_t*", (void *)(&r), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(4): { goto call_lbl_4; } case(9): { goto call_lbl_9; } case(13): { goto call_lbl_13; } case(15): { goto call_lbl_15; } case(18): { goto call_lbl_18; } case(22): { goto call_lbl_22; } default: { chimes_error(); } } } r = (&(s->stack[s->top + i])) ;
        alias_group_changed(5, (size_t)(9545009563461850855UL), (size_t)(9545009563461850856UL), (size_t)(9545009563461850857UL), (size_t)(9545009563461850858UL), (size_t)(9545009563461851102UL)); call_lbl_22: calling((void*)&rng_showstate, 22, 9545009563461851058UL, 2, (size_t)(9545009563461851042UL), (size_t)(9545009563461852195UL)); printf("ss_steal:  Thread %2d posn %d (steal #%d) receives %s [%d] from thread %d posn %d (%p)\n",
               omp_get_thread_num(), s->top + i, s->nSteal,
               rng_showstate(r->state.state, debug_str),
               r->height, victim, victimShared + i,
               (void *) victimSharedStart);
      }
    }
    s->top += k;
  }
  else {
    s->nFail++;
    if (debug & 4) {
      alias_group_changed(1, (size_t)(9545009563461851102UL)); printf("Thread %d failed to steal %d nodes from thread %d, ActAv = %d, sh = %d, loc =%d\n",
      omp_get_thread_num(), k, victim, victimWorkAvail, victimShared, victimLocal);
    }
  }
  alias_group_changed(4, (size_t)(9545009563461850855UL), (size_t)(9545009563461850856UL), (size_t)(9545009563461850857UL), (size_t)(9545009563461851102UL)); rm_stack(false, 0UL); return (ok);
}
int findwork(int k) {new_stack((void *)(&findwork), 1, 1, (size_t)(0UL), "findwork|k|0", "i32", (void *)(&k), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: int i; register_stack_var("findwork|i|0", "i32", (void *)(&i), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_1; } lbl_1: int v; register_stack_var("findwork|v|0", "i32", (void *)(&v), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(4): { goto call_lbl_4; } default: { chimes_error(); } } } ;
  alias_group_changed(3, (size_t)(9545009563461851106UL), (size_t)(9545009563461851107UL), (size_t)(9545009563461851108UL)); call_lbl_2: calling((void*)&omp_get_num_threads, 2, 0UL, 0); for (i = 1; i < omp_get_num_threads(); i++) {
     call_lbl_4: calling((void*)&omp_get_num_threads, 4, 0UL, 0); v = (omp_get_thread_num() + i) % omp_get_num_threads();
    if (stealStack[v]->workAvail >= k) {alias_group_changed(2, (size_t)(9545009563461851105UL), (size_t)(9545009563461851108UL)); rm_stack(false, 0UL); return v;; };
  }
  alias_group_changed(2, (size_t)(9545009563461851105UL), (size_t)(9545009563461851108UL)); rm_stack(false, 0UL); return -1;
}
void ss_initState(StealStack *s) {new_stack((void *)(&ss_initState), 1, 1, (size_t)(9545009563461851195UL), "ss_initState|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: int i; register_stack_var("ss_initState|i|0", "i32", (void *)(&i), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } default: { chimes_error(); } } } ;
  alias_group_changed(1, (size_t)(9545009563461851147UL)); call_lbl_2: calling((void*)&uts_wctime, 2, 0UL, 0); s->timeLast = uts_wctime();
  for (i = 0; i < 5; i++) {
    s->time[i] = 0.0;
    s->entries[i] = 0;
  }
  s->curState = 2;
  if (debug & 8) {alias_group_changed(2, (size_t)(9545009563461851148UL), (size_t)(9545009563461851195UL)); printf("Thread %d start state %d (t = %f)\n", omp_get_thread_num(), s->curState, s->timeLast); };
alias_group_changed(2, (size_t)(9545009563461851148UL), (size_t)(9545009563461851195UL)); rm_stack(false, 0UL); }
void ss_setState(StealStack *s, int state){new_stack((void *)(&ss_setState), 2, 2, (size_t)(9545009563461851268UL), (size_t)(0UL), "ss_setState|s|0", "%struct.stealStack_t*", (void *)(&s), (size_t)8, 1, 0, 0, "ss_setState|state|0", "i32", (void *)(&state), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: double time; register_stack_var("ss_setState|time|0", "double", (void *)(&time), (size_t)8, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(6): { goto call_lbl_6; } default: { chimes_error(); } } } ;
  if (state < 0 || state >= 5) {alias_group_changed(2, (size_t)(9545009563461851196UL), (size_t)(9545009563461851197UL)); call_lbl_2: calling((void*)&ss_error, 2, 0UL, 1, (size_t)(9545009563461852239UL)); ss_error("ss_setState: thread state out of range"); };
  if (state == s->curState) {alias_group_changed(4, (size_t)(9545009563461851196UL), (size_t)(9545009563461851197UL), (size_t)(9545009563461851198UL), (size_t)(9545009563461851268UL)); rm_stack(false, 0UL); return;; };
  alias_group_changed(2, (size_t)(9545009563461851196UL), (size_t)(9545009563461851197UL)); call_lbl_6: calling((void*)&uts_wctime, 6, 0UL, 0); time = uts_wctime();
  s->time[s->curState] += time - s->timeLast;
  s->entries[state]++;
  s->timeLast = time;
  s->curState = state;
  if (debug & 8) {alias_group_changed(2, (size_t)(9545009563461851198UL), (size_t)(9545009563461851268UL)); printf("Thread %d enter state %d [#%d] (t = %f)\n", omp_get_thread_num(), state, s->entries[state], time); };
alias_group_changed(4, (size_t)(9545009563461851196UL), (size_t)(9545009563461851197UL), (size_t)(9545009563461851198UL), (size_t)(9545009563461851268UL)); rm_stack(false, 0UL); }
void initNode(Node * child)
{new_stack((void *)(&initNode), 1, 0, (size_t)(9545009563461851283UL)); if (____chimes_replaying) { switch(get_next_call()) { default: { chimes_error(); } } }
  child->type = -1;
  child->height = -1;
  child->numChildren = -1;
alias_group_changed(2, (size_t)(9545009563461851270UL), (size_t)(9545009563461851283UL)); rm_stack(false, 0UL); }
void initRootNode(Node * root, int type)
{new_stack((void *)(&initRootNode), 2, 2, (size_t)(9545009563461851294UL), (size_t)(0UL), "initRootNode|root|0", "%struct.node_t*", (void *)(&root), (size_t)8, 1, 0, 0, "initRootNode|type|0", "i32", (void *)(&type), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } default: { chimes_error(); } } }
  alias_group_changed(2, (size_t)(9545009563461851284UL), (size_t)(9545009563461851285UL)); call_lbl_2: calling((void*)&uts_initRoot, 2, 0UL, 2, (size_t)(9545009563461851294UL), (size_t)(0UL)); uts_initRoot(root, type);
rm_stack(false, 0UL); }
void releaseNodes(StealStack *ss);
void genChildren(Node * parent, Node * child, StealStack * ss) {new_stack((void *)(&genChildren), 3, 3, (size_t)(9545009563461851404UL), (size_t)(9545009563461851405UL), (size_t)(9545009563461851406UL), "genChildren|parent|0", "%struct.node_t*", (void *)(&parent), (size_t)8, 1, 0, 0, "genChildren|child|0", "%struct.node_t*", (void *)(&child), (size_t)8, 1, 0, 0, "genChildren|ss|0", "%struct.stealStack_t*", (void *)(&ss), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_0; }
    lbl_0: int parentHeight; register_stack_var("genChildren|parentHeight|0", "i32", (void *)(&parentHeight), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_1; } parentHeight = (parent->height) ;
   lbl_1: int numChildren; register_stack_var("genChildren|numChildren|0", "i32", (void *)(&numChildren), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_2; } lbl_2: int childType; register_stack_var("genChildren|childType|0", "i32", (void *)(&childType), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_3; } ;
  alias_group_changed(4, (size_t)(9545009563461851298UL), (size_t)(9545009563461851299UL), (size_t)(9545009563461851300UL), (size_t)(9545009563461851301UL)); call_lbl_2: calling((void*)&uts_numChildren, 2, 0UL, 1, (size_t)(9545009563461851404UL)); numChildren = uts_numChildren(parent);
  alias_group_changed(1, (size_t)(9545009563461851302UL)); call_lbl_4: calling((void*)&uts_childType, 4, 0UL, 1, (size_t)(9545009563461851404UL)); childType = uts_childType(parent);
  parent->numChildren = numChildren;
  if (debug & 2) {
    alias_group_changed(5, (size_t)(9545009563461851303UL), (size_t)(9545009563461851304UL), (size_t)(9545009563461851305UL), (size_t)(9545009563461851404UL), (size_t)(9545009563461851405UL)); call_lbl_8: calling((void*)&ss_topPosn, 8, 0UL, 1, (size_t)(9545009563461851406UL)); call_lbl_9: calling((void*)&rng_showstate, 9, 9545009563461851340UL, 2, (size_t)(9545009563461851404UL), (size_t)(9545009563461852195UL)); printf("Gen:  Thread %d, posn %2d: node %s [%d] has %2d children\n",
           omp_get_thread_num(), ss_topPosn(ss),
           rng_showstate(parent->state.state, debug_str),
           parentHeight, numChildren);
  }
  if (numChildren > 0) {
     lbl_3: int i; register_stack_var("genChildren|i|0", "i32", (void *)(&i), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_4; } lbl_4: int j; register_stack_var("genChildren|j|0", "i32", (void *)(&j), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(4): { goto call_lbl_4; } case(8): { goto call_lbl_8; } case(9): { goto call_lbl_9; } case(11): { goto call_lbl_11; } case(13): { goto call_lbl_13; } case(14): { goto call_lbl_14; } default: { chimes_error(); } } } ;
    child->type = childType;
    child->height = parentHeight + 1;
    for (i = 0; i < numChildren; i++) {
      for (j = 0; j < computeGranularity; j++) {
        alias_group_changed(5, (size_t)(9545009563461851303UL), (size_t)(9545009563461851304UL), (size_t)(9545009563461851305UL), (size_t)(9545009563461851404UL), (size_t)(9545009563461851405UL)); call_lbl_11: calling((void*)&rng_spawn, 11, 0UL, 3, (size_t)(9545009563461851404UL), (size_t)(9545009563461851405UL), (size_t)(0UL)); rng_spawn(parent->state.state, child->state.state, i);
      }
      alias_group_changed(5, (size_t)(9545009563461851303UL), (size_t)(9545009563461851304UL), (size_t)(9545009563461851305UL), (size_t)(9545009563461851404UL), (size_t)(9545009563461851405UL)); call_lbl_13: calling((void*)&ss_push, 13, 0UL, 2, (size_t)(9545009563461851406UL), (size_t)(9545009563461851405UL)); ss_push(ss, child);
       call_lbl_14: calling((void*)&releaseNodes, 14, 0UL, 1, (size_t)(9545009563461851406UL)); releaseNodes(ss);
    }
  } else {
    ss->nLeaves++;
  }
alias_group_changed(5, (size_t)(9545009563461851303UL), (size_t)(9545009563461851304UL), (size_t)(9545009563461851404UL), (size_t)(9545009563461851405UL), (size_t)(9545009563461851406UL)); rm_stack(false, 0UL); }
void cb_init(){new_stack((void *)(&cb_init), 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(1): { goto call_lbl_1; } case(6): { goto call_lbl_6; } case(8): { goto call_lbl_8; } default: { chimes_error(); } } }
   call_lbl_1: calling((void*)&omp_global_lock_alloc, 1, 9545009563461851475UL, 0); cb_lock=omp_global_lock_alloc();
  if (debug & 4) {alias_group_changed(1, (size_t)(9545009563461852200UL)); printf("Thread %d, cb lock at %p\n", omp_get_thread_num(), (void *)cb_lock); };
  alias_group_changed(1, (size_t)(9545009563461852200UL)); call_lbl_6: calling((void*)&omp_set_lock, 6, 0UL, 1, (size_t)(9545009563461851475UL)); omp_set_lock(cb_lock);
  cb_count = 0;
  cb_cancel = 0;
  cb_done = 0;
  alias_group_changed(1, (size_t)(9545009563461852189UL)); call_lbl_8: calling((void*)&omp_unset_lock, 8, 0UL, 1, (size_t)(9545009563461851475UL)); omp_unset_lock(cb_lock);
rm_stack(false, 0UL); }
int cbarrier_wait() {new_stack((void *)(&cbarrier_wait), 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: int l_count; register_stack_var("cbarrier_wait|l_count|0", "i32", (void *)(&l_count), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_1; } lbl_1: int l_done; register_stack_var("cbarrier_wait|l_done|0", "i32", (void *)(&l_done), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_2; } lbl_2: int l_cancel; register_stack_var("cbarrier_wait|l_cancel|0", "i32", (void *)(&l_cancel), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_3; } ;
    lbl_3: int pe; register_stack_var("cbarrier_wait|pe|0", "i32", (void *)(&pe), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(3): { goto call_lbl_3; } case(5): { goto call_lbl_5; } case(9): { goto call_lbl_9; } case(16): { goto call_lbl_16; } case(20): { goto call_lbl_20; } default: { chimes_error(); } } } pe = (omp_get_thread_num()) ;
  alias_group_changed(1, (size_t)(9545009563461851468UL)); call_lbl_3: calling((void*)&omp_set_lock, 3, 0UL, 1, (size_t)(9545009563461851475UL)); omp_set_lock(cb_lock);
  cb_count++;
  alias_group_changed(1, (size_t)(9545009563461852189UL)); call_lbl_5: calling((void*)&omp_get_num_threads, 5, 0UL, 0); if (cb_count == omp_get_num_threads()) {
    cb_done = 1;
  }
  l_count = cb_count;
  l_done = cb_done;
  if (stealStack[pe]->nNodes_last == stealStack[pe]->nNodes) {
    ++stealStack[pe]->falseWakeups;
  }
  alias_group_changed(4, (size_t)(9545009563461851465UL), (size_t)(9545009563461851466UL), (size_t)(9545009563461851493UL), (size_t)(9545009563461852189UL)); stealStack[omp_get_thread_num()]->nNodes_last = stealStack[pe]->nNodes;
  alias_group_changed(1, (size_t)(9545009563461851493UL)); call_lbl_9: calling((void*)&omp_unset_lock, 9, 0UL, 1, (size_t)(9545009563461851475UL)); omp_unset_lock(cb_lock);
  if (debug & 16) {printf("Thread %d enter spin-wait, count = %d, done = %d\n", omp_get_thread_num(), l_count, l_done); };
  do {
    l_count = cb_count;
    l_cancel = cb_cancel;
    l_done = cb_done;
  }
  while (!l_cancel && !l_done);
  if (debug & 16) {alias_group_changed(3, (size_t)(9545009563461851465UL), (size_t)(9545009563461851466UL), (size_t)(9545009563461851467UL)); printf("Thread %d exit  spin-wait, count = %d, done = %d, cancel = %d\n", omp_get_thread_num(), l_count, l_done, l_cancel); };
  alias_group_changed(3, (size_t)(9545009563461851465UL), (size_t)(9545009563461851466UL), (size_t)(9545009563461851467UL)); call_lbl_16: calling((void*)&omp_set_lock, 16, 0UL, 1, (size_t)(9545009563461851475UL)); omp_set_lock(cb_lock);
  cb_count--;
  l_count = cb_count;
  cb_cancel = 0;
  l_done = cb_done;
  alias_group_changed(3, (size_t)(9545009563461851465UL), (size_t)(9545009563461851466UL), (size_t)(9545009563461852189UL)); ++stealStack[omp_get_thread_num()]->wakeups;
  alias_group_changed(1, (size_t)(9545009563461851493UL)); call_lbl_20: calling((void*)&omp_unset_lock, 20, 0UL, 1, (size_t)(9545009563461851475UL)); omp_unset_lock(cb_lock);
  if (debug & 16) {printf("Thread %d exit idle state, count = %d, done = %d\n", omp_get_thread_num(), l_count, cb_done); };
  rm_stack(false, 0UL); return cb_done;
}
void cbarrier_cancel() {new_stack((void *)(&cbarrier_cancel), 0, 0); if (____chimes_replaying) { switch(get_next_call()) { default: { chimes_error(); } } }
  cb_cancel = 1;
alias_group_changed(1, (size_t)(9545009563461852189UL)); rm_stack(false, 0UL); }
void releaseNodes(StealStack *ss){new_stack((void *)(&releaseNodes), 1, 1, (size_t)(9545009563461851445UL), "releaseNodes|ss|0", "%struct.stealStack_t*", (void *)(&ss), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(1): { goto call_lbl_1; } case(3): { goto call_lbl_3; } case(4): { goto call_lbl_4; } case(5): { goto call_lbl_5; } case(6): { goto call_lbl_6; } case(7): { goto call_lbl_7; } default: { chimes_error(); } } }
  if (doSteal) {
     call_lbl_1: calling((void*)&ss_localDepth, 1, 0UL, 1, (size_t)(9545009563461851445UL)); if (ss_localDepth(ss) > 2 * chunkSize) {
      alias_group_changed(1, (size_t)(9545009563461851412UL)); call_lbl_3: calling((void*)&ss_setState, 3, 0UL, 2, (size_t)(9545009563461851445UL), (size_t)(0UL)); ss_setState(ss, 3);
       call_lbl_4: calling((void*)&ss_release, 4, 0UL, 2, (size_t)(9545009563461851445UL), (size_t)(0UL)); ss_release(ss, chunkSize);
      if (ss->nNodes % cbint == 0) {
         call_lbl_5: calling((void*)&ss_setState, 5, 0UL, 2, (size_t)(9545009563461851445UL), (size_t)(0UL)); ss_setState(ss, 4);
         call_lbl_6: calling((void*)&cbarrier_cancel, 6, 0UL, 0); cbarrier_cancel();
      }
       call_lbl_7: calling((void*)&ss_setState, 7, 0UL, 2, (size_t)(9545009563461851445UL), (size_t)(0UL)); ss_setState(ss, 0);
    }
  }
alias_group_changed(1, (size_t)(9545009563461851412UL)); rm_stack(false, 0UL); }
void parTreeSearch(StealStack *ss) {new_stack((void *)(&parTreeSearch), 1, 1, (size_t)(9545009563461851697UL), "parTreeSearch|ss|0", "%struct.stealStack_t*", (void *)(&ss), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_0; }
    lbl_0: int done; register_stack_var("parTreeSearch|done|0", "i32", (void *)(&done), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_1; } done = (0) ;
   lbl_1: Node *parent; register_stack_var("parTreeSearch|parent|0", "%struct.node_t*", (void *)(&parent), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_2; } ;
    lbl_2: Node child; register_stack_var("parTreeSearch|child|0", "%struct.node_t = type { i32, i32, i32, %struct.state_t }", (void *)(&child), (size_t)32, 0, 1, 0); if (____chimes_replaying) { goto lbl_3; } ;
   call_lbl_1: calling((void*)&initNode, 1, 0UL, 1, (size_t)(9545009563461851599UL)); initNode(&child);
  while (done == 0) {
      lbl_3: int localDepth; register_stack_var("parTreeSearch|localDepth|0", "i32", (void *)(&localDepth), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_4; } call_lbl_2: calling((void*)&ss_localDepth, 2, 0UL, 1, (size_t)(9545009563461851697UL)); localDepth = (ss_localDepth(ss)) ;
    while (localDepth > 0) {
      alias_group_changed(5, (size_t)(9545009563461851596UL), (size_t)(9545009563461851597UL), (size_t)(9545009563461851600UL), (size_t)(9545009563461851601UL), (size_t)(9545009563461851602UL)); call_lbl_4: calling((void*)&ss_setState, 4, 0UL, 2, (size_t)(9545009563461851697UL), (size_t)(0UL)); ss_setState(ss, 0);
       call_lbl_5: calling((void*)&ss_top, 5, 9545009563461851632UL, 1, (size_t)(9545009563461851697UL)); parent = ss_top(ss);
      if (parent->numChildren < 0){
 alias_group_changed(1, (size_t)(9545009563461851598UL)); call_lbl_7: calling((void*)&genChildren, 7, 0UL, 3, (size_t)(9545009563461851632UL), (size_t)(9545009563461851599UL), (size_t)(9545009563461851697UL)); genChildren(parent,&child,ss);
      }
      else {
        alias_group_changed(1, (size_t)(9545009563461851598UL)); call_lbl_9: calling((void*)&ss_pop, 9, 0UL, 1, (size_t)(9545009563461851697UL)); ss_pop(ss);
      }
       call_lbl_10: calling((void*)&releaseNodes, 10, 0UL, 1, (size_t)(9545009563461851697UL)); releaseNodes(ss);
       call_lbl_11: calling((void*)&ss_localDepth, 11, 0UL, 1, (size_t)(9545009563461851697UL)); localDepth = ss_localDepth(ss);
    }
     call_lbl_13: calling((void*)&ss_acquire, 13, 0UL, 2, (size_t)(9545009563461851697UL), (size_t)(0UL)); if (alias_group_changed(5, (size_t)(9545009563461851596UL), (size_t)(9545009563461851597UL), (size_t)(9545009563461851600UL), (size_t)(9545009563461851601UL), (size_t)(9545009563461851602UL)) || ss_acquire(ss, chunkSize)) {continue;; };
    if (doSteal) {
        lbl_4: int goodSteal; register_stack_var("parTreeSearch|goodSteal|0", "i32", (void *)(&goodSteal), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_5; } goodSteal = (0) ;
       lbl_5: int victimId; register_stack_var("parTreeSearch|victimId|0", "i32", (void *)(&victimId), (size_t)4, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(1): { goto call_lbl_1; } case(2): { goto call_lbl_2; } case(4): { goto call_lbl_4; } case(5): { goto call_lbl_5; } case(7): { goto call_lbl_7; } case(9): { goto call_lbl_9; } case(10): { goto call_lbl_10; } case(11): { goto call_lbl_11; } case(13): { goto call_lbl_13; } case(15): { goto call_lbl_15; } case(16): { goto call_lbl_16; } case(18): { goto call_lbl_18; } case(20): { goto call_lbl_20; } case(22): { goto call_lbl_22; } case(23): { goto call_lbl_23; } case(25): { goto call_lbl_25; } default: { chimes_error(); } } } ;
      alias_group_changed(1, (size_t)(9545009563461851601UL)); call_lbl_15: calling((void*)&ss_setState, 15, 0UL, 2, (size_t)(9545009563461851697UL), (size_t)(0UL)); ss_setState(ss, 1);
       call_lbl_16: calling((void*)&findwork, 16, 0UL, 1, (size_t)(0UL)); victimId = findwork(chunkSize);
      while (victimId != -1 && !goodSteal) {
 alias_group_changed(2, (size_t)(9545009563461851601UL), (size_t)(9545009563461851602UL)); call_lbl_18: calling((void*)&ss_steal, 18, 0UL, 3, (size_t)(9545009563461851697UL), (size_t)(0UL), (size_t)(0UL)); goodSteal = ss_steal(ss, victimId, chunkSize);
 if (!goodSteal) {alias_group_changed(1, (size_t)(9545009563461851601UL)); call_lbl_20: calling((void*)&findwork, 20, 0UL, 1, (size_t)(0UL)); victimId = findwork(chunkSize); };
      }
      if (goodSteal) {continue;; };
    }
    alias_group_changed(2, (size_t)(9545009563461851601UL), (size_t)(9545009563461851602UL)); call_lbl_22: calling((void*)&ss_setState, 22, 0UL, 2, (size_t)(9545009563461851697UL), (size_t)(0UL)); ss_setState(ss, 2);
     call_lbl_23: calling((void*)&cbarrier_wait, 23, 0UL, 0); done = cbarrier_wait();
  }
    alias_group_changed(5, (size_t)(9545009563461851596UL), (size_t)(9545009563461851597UL), (size_t)(9545009563461851600UL), (size_t)(9545009563461851601UL), (size_t)(9545009563461851602UL)); call_lbl_25: calling((void*)&checkpoint, 25, 0UL, 0); checkpoint();
rm_stack(false, 0UL); }
void showStats(double elapsedSecs) {new_stack((void *)(&showStats), 1, 1, (size_t)(0UL), "showStats|elapsedSecs|0", "double", (void *)(&elapsedSecs), (size_t)8, 0, 0, 0); if (____chimes_replaying) { goto lbl_0; }
   lbl_0: int i; register_stack_var("showStats|i|0", "i32", (void *)(&i), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_1; } ;
    lbl_1: int tnodes; register_stack_var("showStats|tnodes|0", "i32", (void *)(&tnodes), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_2; } lbl_2: int tleaves; register_stack_var("showStats|tleaves|0", "i32", (void *)(&tleaves), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_3; } lbl_3: int trel; register_stack_var("showStats|trel|0", "i32", (void *)(&trel), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_4; } lbl_4: int tacq; register_stack_var("showStats|tacq|0", "i32", (void *)(&tacq), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_5; } lbl_5: int tsteal; register_stack_var("showStats|tsteal|0", "i32", (void *)(&tsteal), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_6; } lbl_6: int tfail; register_stack_var("showStats|tfail|0", "i32", (void *)(&tfail), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_7; } tnodes = (0) ; tleaves = (0) ; trel = (0) ; tacq = (0) ; tsteal = (0) ; tfail = (0) ;
    lbl_7: int mdepth; register_stack_var("showStats|mdepth|0", "i32", (void *)(&mdepth), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_8; } lbl_8: int mheight; register_stack_var("showStats|mheight|0", "i32", (void *)(&mheight), (size_t)4, 0, 0, 0); if (____chimes_replaying) { goto lbl_9; } mdepth = (0) ; mheight = (0) ;
    lbl_9: double twork; register_stack_var("showStats|twork|0", "double", (void *)(&twork), (size_t)8, 0, 0, 0); if (____chimes_replaying) { goto lbl_10; } lbl_10: double tsearch; register_stack_var("showStats|tsearch|0", "double", (void *)(&tsearch), (size_t)8, 0, 0, 0); if (____chimes_replaying) { goto lbl_11; } lbl_11: double tidle; register_stack_var("showStats|tidle|0", "double", (void *)(&tidle), (size_t)8, 0, 0, 0); if (____chimes_replaying) { goto lbl_12; } lbl_12: double tovh; register_stack_var("showStats|tovh|0", "double", (void *)(&tovh), (size_t)8, 0, 0, 0); if (____chimes_replaying) { goto lbl_13; } lbl_13: double tcbovh; register_stack_var("showStats|tcbovh|0", "double", (void *)(&tcbovh), (size_t)8, 0, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(2): { goto call_lbl_2; } case(4): { goto call_lbl_4; } case(5): { goto call_lbl_5; } case(10): { goto call_lbl_10; } case(11): { goto call_lbl_11; } case(12): { goto call_lbl_12; } case(14): { goto call_lbl_14; } case(15): { goto call_lbl_15; } case(17): { goto call_lbl_17; } default: { chimes_error(); } } } twork = (0.) ; tsearch = (0.) ; tidle = (0.) ; tovh = (0.) ; tcbovh = (0.) ;
  alias_group_changed(15, (size_t)(9545009563461851698UL), (size_t)(9545009563461851699UL), (size_t)(9545009563461851700UL), (size_t)(9545009563461851701UL), (size_t)(9545009563461851702UL), (size_t)(9545009563461851703UL), (size_t)(9545009563461851704UL), (size_t)(9545009563461851705UL), (size_t)(9545009563461851706UL), (size_t)(9545009563461851707UL), (size_t)(9545009563461851708UL), (size_t)(9545009563461851709UL), (size_t)(9545009563461851710UL), (size_t)(9545009563461851711UL), (size_t)(9545009563461851712UL)); call_lbl_2: calling((void*)&omp_get_num_threads, 2, 0UL, 0); for (i = 0; i < omp_get_num_threads(); i++) {
    tnodes += stealStack[i]->nNodes;
    tleaves += stealStack[i]->nLeaves;
    trel += stealStack[i]->nRelease;
    tacq += stealStack[i]->nAcquire;
    tsteal += stealStack[i]->nSteal;
    tfail += stealStack[i]->nFail;
    twork += stealStack[i]->time[0];
    tsearch += stealStack[i]->time[1];
    tidle += stealStack[i]->time[2];
    tovh += stealStack[i]->time[3];
    tcbovh += stealStack[i]->time[4];
    mdepth = (((mdepth) > (stealStack[i]->maxStackDepth)) ? (mdepth) : (stealStack[i]->maxStackDepth));
    mheight = (((mheight) > (stealStack[i]->maxTreeDepth)) ? (mheight) : (stealStack[i]->maxTreeDepth));
  }
  if (trel != tacq + tsteal) {
    printf("*** error! total released != total acquired + total stolen\n");
  }
   call_lbl_4: calling((void*)&uts_showStats, 4, 0UL, 6, (size_t)(0UL), (size_t)(0UL), (size_t)(0UL), (size_t)(0UL), (size_t)(0UL), (size_t)(0UL)); call_lbl_5: calling((void*)&omp_get_num_threads, 5, 0UL, 0); uts_showStats(omp_get_num_threads(), chunkSize, elapsedSecs, tnodes, tleaves, mheight);
  if (verbose > 1) {
    if (doSteal) {
      printf("Total chunks released = %d, of which %d reacquired and %d stolen\n",
          trel, tacq, tsteal);
      printf("Failed steal operations = %d, ", tfail);
    }
    printf("Max stealStack size = %d\n", mdepth);
     call_lbl_10: calling((void*)&omp_get_num_threads, 10, 0UL, 0); call_lbl_11: calling((void*)&omp_get_num_threads, 11, 0UL, 0); call_lbl_12: calling((void*)&omp_get_num_threads, 12, 0UL, 0); printf("Avg time per thread: Work = %.6f, Search = %.6f, Idle = %.6f\n", (twork / omp_get_num_threads()),
        (tsearch / omp_get_num_threads()), (tidle / omp_get_num_threads()));
     call_lbl_14: calling((void*)&omp_get_num_threads, 14, 0UL, 0); call_lbl_15: calling((void*)&omp_get_num_threads, 15, 0UL, 0); printf("                     Overhead = %6f, CB_Overhead = %6f\n\n", (tovh / omp_get_num_threads()),
        (tcbovh/omp_get_num_threads()));
  }
  if (verbose > 2) {
    alias_group_changed(1, (size_t)(9545009563461851699UL)); call_lbl_17: calling((void*)&omp_get_num_threads, 17, 0UL, 0); for (i = 0; i < omp_get_num_threads(); i++) {
      printf("** Thread %d\n", i);
      printf("  # nodes explored    = %d\n", stealStack[i]->nNodes);
      printf("  # chunks released   = %d\n", stealStack[i]->nRelease);
      printf("  # chunks reacquired = %d\n", stealStack[i]->nAcquire);
      printf("  # chunks stolen     = %d\n", stealStack[i]->nSteal);
      printf("  # failed steals     = %d\n", stealStack[i]->nFail);
      printf("  maximum stack depth = %d\n", stealStack[i]->maxStackDepth);
      printf("  work time           = %.6f secs (%d sessions)\n",
             stealStack[i]->time[0], stealStack[i]->entries[0]);
      printf("  overhead time       = %.6f secs (%d sessions)\n",
             stealStack[i]->time[3], stealStack[i]->entries[3]);
      printf("  search time         = %.6f secs (%d sessions)\n",
             stealStack[i]->time[1], stealStack[i]->entries[1]);
      printf("  idle time           = %.6f secs (%d sessions)\n",
             stealStack[i]->time[2], stealStack[i]->entries[2]);
      printf("  wakeups             = %d, false wakeups = %d (%.2f%%)",
             stealStack[i]->wakeups, stealStack[i]->falseWakeups,
             (stealStack[i]->wakeups == 0) ? 0.00 : ((((double)stealStack[i]->falseWakeups)/stealStack[i]->wakeups)*100.0));
      printf("\n");
    }
  }
rm_stack(false, 0UL); }
int main(int argc, char *argv[]) {init_chimes(); new_stack((void *)(&main), 2, 2, (size_t)(0UL), (size_t)(9545009563461852186UL), "main|argc|0", "i32", (void *)(&argc), (size_t)4, 0, 0, 0, "main|argv|0", "i8**", (void *)(&argv), (size_t)8, 1, 0, 0); if (____chimes_replaying) { goto lbl_0; }
    lbl_0: Node root; register_stack_var("main|root|0", "%struct.node_t = type { i32, i32, i32, %struct.state_t }", (void *)(&root), (size_t)32, 0, 1, 0); if (____chimes_replaying) { switch(get_next_call()) { case(25): { goto call_lbl_25; } case(3): { goto call_lbl_3; } case(4): { goto call_lbl_4; } default: { chimes_error(); } } } ;
  alias_group_changed(3, (size_t)(9545009563461852118UL), (size_t)(9545009563461852119UL), (size_t)(9545009563461852120UL)); call_lbl_3: calling((void*)&uts_parseParams, 3, 0UL, 2, (size_t)(0UL), (size_t)(9545009563461852186UL)); uts_parseParams(argc, argv);
   call_lbl_4: calling((void*)&cb_init, 4, 0UL, 0); cb_init(); { call_lbl_25: unsigned ____chimes_parent_stack_depth0 = get_parent_vars_stack_depth(); unsigned ____chimes_call_stack_depth0 = get_thread_stack_depth(); size_t ____chimes_region_id0; unsigned ____chimes_parent_thread0 = entering_omp_parallel(25, &____chimes_region_id0, 0); ;
#pragma omp parallel
  { register_thread_local_stack_vars(LIBCHIMES_THREAD_NUM(), ____chimes_parent_thread0, false, false, ____chimes_parent_stack_depth0, ____chimes_region_id0, 0); if (____chimes_replaying) { goto lbl_1; }
     lbl_1: double t1; register_stack_var("main|t1|0", "double", (void *)(&t1), (size_t)8, 0, 0, 0); if (____chimes_replaying) { goto lbl_2; } lbl_2: double t2; register_stack_var("main|t2|0", "double", (void *)(&t2), (size_t)8, 0, 0, 0); if (____chimes_replaying) { goto lbl_3; } lbl_3: double et; register_stack_var("main|et|0", "double", (void *)(&et), (size_t)8, 0, 0, 0); if (____chimes_replaying) { goto lbl_4; } ;
     lbl_4: StealStack *ss; register_stack_var("main|ss|0", "%struct.stealStack_t*", (void *)(&ss), (size_t)8, 1, 0, 0); if (____chimes_replaying) { switch(get_next_call()) { case(6): { goto call_lbl_6; } case(12): { goto call_lbl_12; } case(14): { goto call_lbl_14; } case(15): { goto call_lbl_15; } case(16): { goto call_lbl_16; } case(17): { goto call_lbl_17; } case(19): { goto call_lbl_19; } case(20): { goto call_lbl_20; } case(23): { goto call_lbl_23; } default: { chimes_error(); } } } ;
    if (omp_get_thread_num() == 0) {
       call_lbl_6: calling((void*)&uts_printParams, 6, 0UL, 0); uts_printParams();
    }
    stealStack[omp_get_thread_num()] = ( StealStack *) malloc_wrapper (sizeof(StealStack), 9545009563461851493UL, 0, 1, (int)sizeof(struct stealStack_t), 3, (int)__builtin_offsetof(struct stealStack_t, stackLock), (int)__builtin_offsetof(struct stealStack_t, stack), (int)__builtin_offsetof(struct stealStack_t, stack_g));
    alias_group_changed(1, (size_t)(9545009563461852196UL)); ss = (StealStack *) stealStack[omp_get_thread_num()];
    alias_group_changed(1, (size_t)(9545009563461852125UL)); call_lbl_12: calling((void*)&ss_init, 12, 0UL, 2, (size_t)(9545009563461851493UL), (size_t)(0UL)); ss_init(ss, 500000);
    if (omp_get_thread_num() == 0) {
       call_lbl_14: calling((void*)&initRootNode, 14, 0UL, 2, (size_t)(9545009563461852121UL), (size_t)(0UL)); initRootNode(&root, type);
       call_lbl_15: calling((void*)&ss_push, 15, 0UL, 2, (size_t)(9545009563461851493UL), (size_t)(9545009563461852121UL)); ss_push(ss, &root);
    }
#pragma omp barrier
     call_lbl_16: calling((void*)&ss_initState, 16, 0UL, 1, (size_t)(9545009563461851493UL)); ss_initState(ss);
     call_lbl_17: calling((void*)&uts_wctime, 17, 0UL, 0); t1 = uts_wctime();
    alias_group_changed(1, (size_t)(9545009563461852122UL)); call_lbl_19: calling((void*)&parTreeSearch, 19, 0UL, 1, (size_t)(9545009563461851493UL)); parTreeSearch(ss);
     call_lbl_20: calling((void*)&uts_wctime, 20, 0UL, 0); t2 = uts_wctime();
    et = t2 - t1;
#pragma omp barrier
    if (alias_group_changed(2, (size_t)(9545009563461852123UL), (size_t)(9545009563461852124UL)) || omp_get_thread_num() == 0) {
       call_lbl_23: calling((void*)&showStats, 23, 0UL, 1, (size_t)(0UL)); showStats(et);
    }
  } leaving_omp_parallel(____chimes_call_stack_depth0, ____chimes_region_id0); }
  rm_stack(false, 0UL); return 0;
}


static int module_init() {
    init_modulenode_t", 4, (int)__builtin_offsetof (struct node_t, type), (int)__builtin_offsetof (struct node_t, height), (int)__builtin_offsetof (struct node_t, numChildren), (int)__builtin_offsetof (struct node_t, state), "omp_lock_t", 1, (int)__builtin_offsetof (omp_lock_t, _x), "state_t", 1, (int)__builtin_offsetof (struct state_t, state), "stealStack_t", 23, (int)__builtin_offsetof (struct stealStack_t, stackSize), (int)__builtin_offsetof (struct stealStack_t, workAvail), (int)__builtin_offsetof (struct stealStack_t, sharedStart), (int)__builtin_offsetof (struct stealStack_t, local), (int)__builtin_offsetof (struct stealStack_t, top), (int)__builtin_offsetof (struct stealStack_t, maxStackDepth), (int)__builtin_offsetof (struct stealStack_t, nNodes), (int)__builtin_offsetof (struct stealStack_t, maxTreeDepth), (int)__builtin_offsetof (struct stealStack_t, nLeaves), (int)__builtin_offsetof (struct stealStack_t, nAcquire), (int)__builtin_offsetof (struct stealStack_t, nRelease), (int)__builtin_offsetof (struct stealStack_t, nSteal), (int)__builtin_offsetof (struct stealStack_t, nFail), (int)__builtin_offsetof (struct stealStack_t, wakeups), (int)__builtin_offsetof (struct stealStack_t, falseWakeups), (int)__builtin_offsetof (struct stealStack_t, nNodes_last), (int)__builtin_offsetof (struct stealStack_t, time), (int)__builtin_offsetof (struct stealStack_t, timeLast), (int)__builtin_offsetof (struct stealStack_t, entries), (int)__builtin_offsetof (struct stealStack_t, curState), (int)__builtin_offsetof (struct stealStack_t, stackLock), (int)__builtin_offsetof (struct stealStack_t, stack), (int)__builtin_offsetof (struct stealStack_t, stack_g));
    register_global_var("global|doSteal", "i32*", (void *)(&doSteal), 8, 1, 0, 0);
    register_global_var("global|chunkSize", "i32*", (void *)(&chunkSize), 8, 1, 0, 0);
    register_global_var("global|cbint", "i32*", (void *)(&cbint), 8, 1, 0, 0);
    register_global_var("global|pollint", "i32*", (void *)(&pollint), 8, 1, 0, 0);
    register_global_var("global|stats", "i32*", (void *)(&stats), 8, 1, 0, 0);
    register_global_var("global|unbType", "i32*", (void *)(&unbType), 8, 1, 0, 0);
    register_global_var("global|debug_str", "[1000 x i8]*", (void *)(&debug_str), 8, 1, 0, 0);
    register_global_var("global|stealStack", "[32 x %struct.stealStack_t*]*", (void *)(&stealStack), 8, 1, 0, 0);
    register_global_var("global|cb_cancel", "i32*", (void *)(&cb_cancel), 8, 1, 0, 0);
    register_global_var("global|cb_count", "i32*", (void *)(&cb_count), 8, 1, 0, 0);
    register_global_var("global|cb_done", "i32*", (void *)(&cb_done), 8, 1, 0, 0);
    register_global_var("global|cb_lock", "%struct.omp_lock_t**", (void *)(&cb_lock), 8, 1, 0, 0);
    register_global_var("global|startTime", "[32 x double]*", (void *)(&startTime), 8, 1, 0, 0);
    return 0;
}

static int __libchimes_module_init = module_init();
